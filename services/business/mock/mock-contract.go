// Code generated by MockGen. DO NOT EDIT.
// Source: services/business/contract.go

// Package mock_business is a generated GoMock package.
package mock_business

import (
	context "context"
	reflect "reflect"

	business "github.com/decentralized-cloud/user/services/business"
	gomock "github.com/golang/mock/gomock"
)

// MockBusinessContract is a mock of BusinessContract interface.
type MockBusinessContract struct {
	ctrl     *gomock.Controller
	recorder *MockBusinessContractMockRecorder
}

// MockBusinessContractMockRecorder is the mock recorder for MockBusinessContract.
type MockBusinessContractMockRecorder struct {
	mock *MockBusinessContract
}

// NewMockBusinessContract creates a new mock instance.
func NewMockBusinessContract(ctrl *gomock.Controller) *MockBusinessContract {
	mock := &MockBusinessContract{ctrl: ctrl}
	mock.recorder = &MockBusinessContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBusinessContract) EXPECT() *MockBusinessContractMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockBusinessContract) CreateUser(ctx context.Context, request *business.CreateUserRequest) (*business.CreateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, request)
	ret0, _ := ret[0].(*business.CreateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockBusinessContractMockRecorder) CreateUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockBusinessContract)(nil).CreateUser), ctx, request)
}

// DeleteUser mocks base method.
func (m *MockBusinessContract) DeleteUser(ctx context.Context, request *business.DeleteUserRequest) (*business.DeleteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, request)
	ret0, _ := ret[0].(*business.DeleteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockBusinessContractMockRecorder) DeleteUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockBusinessContract)(nil).DeleteUser), ctx, request)
}

// ReadUser mocks base method.
func (m *MockBusinessContract) ReadUser(ctx context.Context, request *business.ReadUserRequest) (*business.ReadUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", ctx, request)
	ret0, _ := ret[0].(*business.ReadUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser.
func (mr *MockBusinessContractMockRecorder) ReadUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockBusinessContract)(nil).ReadUser), ctx, request)
}

// UpdateUser mocks base method.
func (m *MockBusinessContract) UpdateUser(ctx context.Context, request *business.UpdateUserRequest) (*business.UpdateUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, request)
	ret0, _ := ret[0].(*business.UpdateUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockBusinessContractMockRecorder) UpdateUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockBusinessContract)(nil).UpdateUser), ctx, request)
}
