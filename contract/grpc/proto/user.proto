syntax = "proto3";

package user;

/**
 * The different error types
 */
enum Error {
  // Indicates the operation was successful
  NO_ERROR = 0;
  // Indicates the operation fail with unknown error
  UNKNOWN = 1;
  // Indicates the user already exists
  USER_ALREADY_EXISTS = 2;
  // Indicates the user does not exist
  USER_NOT_FOUND = 3;
  // Indicates the provided values for he operation were invalid
  BAD_REQUEST = 4;
}

/**
 * The user object
 */
message User {
  // The user email address
  string email = 1;
}

/**
 * Request to create a new user
 */
message CreateUserRequest {
  // The user object
  User user = 1;
}

/**
 * Response contains the result of creating a new user
 */
message CreateUserResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The unique user identifier
  string userID = 3;

  // The created user object
  User user = 4;

  // The cursor defines the position of the user in the repository that can be
  // later referred to using pagination information
  string cursor = 5;
}

/** Request to read an existing user
 */
message ReadUserRequest {
  // The unique user identifier
  string userID = 1;
}

/**
 * Response contains the result of reading an existing user
 */
message ReadUserResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The user object
  User user = 3;
}

/** Request to read an existing user by email address
 */
message ReadUserByEmailRequest {
  // The unique user identifier
  string email = 1;
}

/**
 * Response contains the result of reading an existing user by email address
 */
message ReadUserByEmailResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The user object
  User user = 3;
}

/**
 * Request to update an existing user
 */
message UpdateUserRequest {
  // The unique user identifier
  string userID = 1;

  // The user object contains the updated user details to update
  User user = 2;
}

/**
 * Response contains the result of updating an existing user
 */
message UpdateUserResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // The updated user object
  User user = 3;

  // The cursor defines the position of the user in the repository that can be
  // later referred to using pagination information
  string cursor = 4;
}

/**
 * Request to delete an existing user
 */
message DeleteUserRequest {
  // The unique user identifier
  string userID = 1;
}

/**
 * Response contains the result of deleting an existing user
 */
message DeleteUserResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;
}

/**
 * The pagination information compatible with graphql-relay connection
 * definition, for more information visit:
 * https://facebook.github.io/relay/graphql/connections.htm
 */
message Pagination {
  bool hasFirst = 1;

  int32 first = 2;

  bool hasAfter = 3;

  string after = 4;

  bool hasLast = 5;

  int32 last = 6;

  bool hasBefore = 7;

  string before = 8;
}

/**
 * The different sorting direction
 */
enum SortingDirection {
  // Indicates result data must be sorted from low to high sequence
  ASCENDING = 0;

  // Indicates result data must be sorted from high to low sequence
  DESCENDING = 1;
}

/**
 * Defines the pair of values that are used to determine how the result data
 * should be sorted.
 */
message SortingOptionPair {
  // The name of the field on
  string name = 1;

  // THe sorting direction
  SortingDirection direction = 2;
}

/**
 * Request to search for users
 */
message SearchRequest {
  // The pagination information
  Pagination pagination = 1;

  // The collection of sorting option determines how the returned data must be
  // sorted
  repeated SortingOptionPair sortingOptions = 2;

  // The unique user identifiers
  repeated string userIDs = 3;
}

/*
 * The pair of user and a cursor that defines the position of the user in the
 * repository that can later referred to using pagination information.
 */
message UserWithCursor {
  // The user object
  User user = 1;

  // The unique user identifier
  string userID = 2;

  // The cursor defines the position of the user in the repository that can be
  // later referred to using pagination information
  string cursor = 3;
}

/**
 * Response contains the result of searching for users
 */
message SearchResponse {
  // Indicate whether the operation has any error
  Error error = 1;

  // Contains error message if the operation was unsuccessful
  string errorMessage = 2;

  // Indicates whether more edges exist prior to the set defined by the clients
  // arguments
  bool hasPreviousPage = 3;

  // Indicates whether more edges exist following the set defined by the clients
  // arguments
  bool hasNextPage = 4;

  // Indicates the total count of the users that matched the provided filter
  // criteria
  int64 totalCount = 5;

  // The list contains the users that matched the search criteria
  repeated UserWithCursor users = 6;
}

/**
 * The user servcie that can create new user, read, update and delete existing
 * user
 */
service UserService {
  // CreateUser creates a new user
  // request: The request to create a new user
  // Returns the result of creating new user
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);

  // ReadUser read an exsiting user
  // request: The request to read an existing user
  // Returns the result of reading an existing user
  rpc ReadUser(ReadUserRequest) returns (ReadUserResponse);

  // ReadUser read an exsiting user by email address
  // request: The request to read an existing user by email address
  // Returns the result of reading an existing user by email address
  rpc ReadUserByEmail(ReadUserByEmailRequest) returns (ReadUserByEmailResponse);

  // UpdateUser update an exsiting user
  // request: The request to update an existing user
  // Returns the result of updateing an existing user
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse);

  // DeleteUser delete an exsiting user
  // request: The request to delete an existing user
  // Returns the result of deleting an existing user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);

  // Search returns the list of users that matched the criteria
  // request: The request contains the search criteria
  // Returns the list of users that matched the criteria
  rpc Search(SearchRequest) returns (SearchResponse);
}
